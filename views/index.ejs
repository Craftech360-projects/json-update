<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="/css/style.css">
  <style>
    :root {
      --primary-color: #4a6bfa;
      --secondary-color: #f8f9fa;
      --border-color: #e0e0e0;
      --text-color: #333333;
      --success-color: #28a745;
      --error-color: #dc3545;
      --shadow: 0 4px 6px rgba(0,0,0,0.1);
      --border-radius: 8px;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: var(--text-color);
      background-color: #f5f7fa;
      margin: 0;
      padding: 0;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    
    h1, h2 {
      color: var(--primary-color);
      margin-bottom: 20px;
    }
    
    h1 {
      text-align: center;
      font-size: 2.5rem;
      margin-top: 20px;
      border-bottom: 2px solid var(--primary-color);
      padding-bottom: 10px;
    }
    
    h2 {
      font-size: 1.8rem;
      border-left: 4px solid var(--primary-color);
      padding-left: 15px;
    }
    
    .page-layout {
      display: grid;
      grid-template-columns: 1fr;
      gap: 30px;
    }
    
    @media (min-width: 992px) {
      .page-layout {
        grid-template-columns: 1fr 1fr;
      }
    }
    
    .card {
      background-color: white;
      border-radius: var(--border-radius);
      box-shadow: var(--shadow);
      padding: 25px;
      margin-bottom: 30px;
      transition: transform 0.3s ease;
    }
    
    .card:hover {
      transform: translateY(-5px);
    }
    
    .alert {
      padding: 15px;
      border-radius: var(--border-radius);
      margin-bottom: 20px;
      font-weight: 500;
      text-align: center;
      animation: fadeIn 0.5s ease;
    }
    
    .alert-success {
      background-color: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    
    .alert-error {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
    
    .fade-out {
      opacity: 0;
      transition: opacity 0.5s ease;
    }
    
    .config-table {
      width: 100%;
      margin: 15px 0;
      border-collapse: collapse;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      border-radius: var(--border-radius);
      overflow: hidden;
    }
    
    .config-table th, .config-table td {
      padding: 15px;
      border: 1px solid var(--border-color);
      text-align: left;
    }
    
    .config-table th {
      background-color: var(--secondary-color);
      font-weight: 600;
      color: var(--primary-color);
    }
    
    .config-table tr:hover {
      background-color: #f8f9fa;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
      color: #555;
    }
    
    input[type="text"], 
    select, 
    textarea {
      width: 100%;
      padding: 12px;
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      font-size: 1rem;
      transition: border-color 0.3s;
      box-sizing: border-box;
    }
    
    input[type="text"]:focus, 
    select:focus, 
    textarea:focus {
      border-color: var(--primary-color);
      outline: none;
      box-shadow: 0 0 0 3px rgba(74, 107, 250, 0.2);
    }
    
    textarea {
      resize: vertical;
      min-height: 100px;
    }
    
    .btn {
      background-color: var(--primary-color);
      color: white;
      border: none;
      padding: 12px 20px;
      border-radius: var(--border-radius);
      cursor: pointer;
      font-size: 1rem;
      font-weight: 500;
      transition: all 0.3s;
      display: inline-block;
      text-align: center;
    }
    
    .btn:hover {
      background-color: #3a5bd9;
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .system-controls {
      text-align: center;
      padding: 20px 0;
    }
    
    .info-note {
      background-color: #fff3cd;
      border-left: 4px solid #ffc107;
      padding: 10px 15px;
      margin: 20px 0;
      border-radius: 0 var(--border-radius) var(--border-radius) 0;
    }
    
    .loader {
      border: 8px solid #f3f3f3;
      border-top: 8px solid var(--primary-color);
      border-radius: 50%;
      width: 60px;
      height: 60px;
      animation: spin 1.5s linear infinite;
      margin: 20px auto;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .container {
        padding: 15px;
      }
      
      h1 {
        font-size: 2rem;
      }
      
      .btn {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Toy Configuration Manager</h1>

    <!-- Success/Error Messages -->
    <% if (typeof success !== 'undefined') { %>
      <div class="alert <%= success ? 'alert-success' : 'alert-error' %>" id="statusAlert">
        <%= message %>
      </div>
    <% } %>

    <div class="page-layout">
      <!-- Current Configuration Section -->
      <div class="card">
        <h2>Current Configuration</h2>
        <%
        let config = {
          name: 'Not set',
          role: 'Not configured',
          language: 'English',
        capabilities: 'Not specified',
        voice: 'Not set' // Default voice
      };

      const currentConfig = inputs && inputs['1'];
      if (currentConfig) {

        // Parse configuration from stored data
        const nameMatch = currentConfig.start_text.match(/Iâ€™m (.*?), the/);
        if (nameMatch) config.name = nameMatch[1] || 'Not set';

        // Determine role type
        if (currentConfig.start_text.includes('super-duper puzzle solver')) {
          config.role = 'Puzzle Solver';
        } else if (currentConfig.start_text.includes('amazing story teller')) {
          config.role = 'Story Teller';
        } else if (currentConfig.start_text.includes('hilarious joke teller')) {
          config.role = 'Joke Teller';
        } else {
          const customMatch = currentConfig.start_text.match(/the (.*?)! I love/);
          config.role = customMatch ? customMatch[1] : 'Custom Role';
        }

        // Parse language
        const langMatch = currentConfig.prompt.match(/ in (\w+)\./i);
        if (langMatch) {
          // Format language name properly
          const lang = langMatch[1].toLowerCase();
          config.language = lang.charAt(0).toUpperCase() + lang.slice(1);
        } else {
          config.language = 'English';
        }

        // Set voice - assuming you save voice ID in inputs
        config.voice = currentConfig.voice || 'Default'; // Or 'Not set'
      %>

        <table class="config-table">
          <tbody>
            <tr>
              <th>Toy Name</th>
              <td><%= config.name %></td>
            </tr>
            <tr>
              <th>Current Role</th>
              <td><%= config.role %></td>
            </tr>
            <tr>
              <th>Language</th>
              <td><%= config.language %></td>
            </tr>
            <!-- <tr>
              <th>Selected Voice</th>
              <td><%= config.voice %></td>
            </tr> -->
            <!-- <tr>
              <th>Capabilities</th>
              <td><%= config.capabilities %></td>
            </tr> -->
          </tbody>
        </table>
        <% } else { %>
          <div class="info-note">No configuration available yet. Please set up your toy using the form.</div>
        <% } %>
      </div>

      <!-- Update Configuration Form -->
      <div class="card">
        <h2>Update Configuration</h2>
        <form action="/submit" method="POST">
          <div class="form-group">
            <label for="name">Toy Name:</label>
            <input type="text" id="name" name="name" required 
                  placeholder="Enter toy name">
          </div>

          <div class="form-group">
            <label for="prompt_selection">Select Role Type:</label>
            <select id="prompt_selection" name="prompt_selection" required>
              <option value="puzzle_solver">Puzzle Solver</option>
              <option value="story_teller">Story Teller</option>
              <option value="joke_teller">Joke Teller</option>
              <option value="custom">Custom Role</option>
            </select>
          </div>

          <div class="form-group" id="custom-prompt-group" style="display: none;">
            <label for="custom_prompt">Custom Role Title:</label>
            <input type="text" id="custom_prompt" name="custom_prompt" 
                  placeholder="Enter custom role (e.g., Magical Wizard)">
            
            <label for="custom_action">Role Capabilities:</label>
            <textarea id="custom_action" name="custom_action" rows="4"
                      placeholder="Describe what this role can do"></textarea>
          </div>

          <div class="form-group">
            <label for="language">Select Language:</label>
            <select id="language" name="language">
              <option value="English">English</option>
              <option value="hindi">Hindi</option>
              <option value="kannada">Kannada</option>
              <option value="tamil">Tamil</option>
              <option value="malayalam">Malayalam</option>
              <option value="bhojpuri">Bhojpuri</option>
              <option value="punjabi">Punjabi</option>
            </select>
          </div>

          <div class="form-group">
            <label for="voice">Select Voice:</label>
            <select id="voice" name="voice" required>
              <option value="tapn1QwocNXk3viVSowa">Sparkles for Kids</option>
              <option value="50YSQEDPA2vlOxhCseP4">Saanu - Soft and Calm</option>
              <option value="zgqefOY5FPQ3bB7OZTVR">Niraj - Hindi Narrator</option>
              <option value="CZdRaSQ51p0onta4eec8">Akshay - Indian Accent Narrator</option>
            </select>
          </div>

          <button type="submit" class="btn">Save Configuration</button>
        </form>
      </div>
    </div>

    <!-- System Controls -->
    <div class="card system-controls">
      <h2>System Controls</h2>
      <div class="info-note">Configuration changes require Docker restart to take effect</div>
      <button id="restartDocker" class="btn">Restart Docker Service</button>
      <div id="loader" class="loader" style="display: none;"></div>
    </div>
  </div>

  <script>
    // Toggle custom role fields
    document.getElementById('prompt_selection').addEventListener('change', function() {
      const customGroup = document.getElementById('custom-prompt-group');
      customGroup.style.display = this.value === 'custom' ? 'block' : 'none';
    });

    // Docker restart handler
    document.getElementById('restartDocker').addEventListener('click', async function() {
      const loader = document.getElementById('loader');
      try {
        loader.style.display = 'block';
        const response = await fetch('/restart-docker', { method: 'POST' });
        const result = await response.json();
        alert(result.message);
      } catch (error) {
        alert('Failed to restart Docker: ' + error.message);
      } finally {
        loader.style.display = 'none';
      }
    });

    document.addEventListener('DOMContentLoaded', () => {
      const alertElement = document.getElementById('statusAlert');
      if (alertElement) {
        // Start fade out after 5 seconds
        setTimeout(() => {
          alertElement.classList.add('fade-out');
          // Remove element after animation
          setTimeout(() => {
            alertElement.remove();
          }, 500); // Match transition duration
        }, 5000); // 5 seconds
      }
    });
  </script>
</body>
</html>
