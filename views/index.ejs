<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="/css/style.css">
  <style>
    :root {
      --primary-color: #4a6bfa;
      --secondary-color: #f8f9fa;
      --border-color: #e0e0e0;
      --text-color: #333333;
      --success-color: #28a745;
      --error-color: #dc3545;
      --shadow: 0 4px 6px rgba(0,0,0,0.1);
      --border-radius: 8px;
      --accent-color: #6c5ce7;
      --light-bg: #f9fafc;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: var(--text-color);
      background-color: var(--light-bg);
      margin: 0;
      padding: 0;
    }

    .container {
      max-width: 900px;
      margin: 0 auto;
      padding: 20px;
    }

    h1, h2 {
      color: var(--primary-color);
      margin-bottom: 20px;
    }

    h1 {
      text-align: center;
      font-size: 2.5rem;
      margin-top: 20px;
      border-bottom: 2px solid var(--primary-color);
      padding-bottom: 10px;
    }

    h2 {
      font-size: 1.8rem;
      border-left: 4px solid var(--primary-color);
      padding-left: 15px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .card {
      background-color: white;
      border-radius: var(--border-radius);
      box-shadow: var(--shadow);
      padding: 25px;
      margin-bottom: 30px;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 15px rgba(0,0,0,0.1);
    }

    .alert {
      padding: 15px;
      border-radius: var(--border-radius);
      margin-bottom: 20px;
      font-weight: 500;
      text-align: center;
      animation: fadeIn 0.5s ease;
    }

    .alert-success {
      background-color: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }

    .alert-error {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }

    .fade-out {
      opacity: 0;
      transition: opacity 0.5s ease;
    }

    .config-table {
      width: 100%;
      margin: 15px 0;
      border-collapse: collapse;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      border-radius: var(--border-radius);
      overflow: hidden;
    }

    .config-table th, .config-table td {
      padding: 15px;
      border: 1px solid var(--border-color);
      text-align: left;
    }

    .config-table th {
      background-color: var(--secondary-color);
      font-weight: 600;
      color: var(--primary-color);
      width: 30%;
    }

    .config-table tr:hover {
      background-color: #f8f9fa;
    }

    .form-group {
      margin-bottom: 20px;
    }

    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
      color: #555;
    }

    input[type="text"],
    select,
    textarea {
      width: 100%;
      padding: 12px;
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      font-size: 1rem;
      transition: border-color 0.3s;
      box-sizing: border-box;
    }

    input[type="text"]:focus,
    select:focus,
    textarea:focus {
      border-color: var(--primary-color);
      outline: none;
      box-shadow: 0 0 0 3px rgba(74, 107, 250, 0.2);
    }

    textarea {
      resize: vertical;
      min-height: 100px;
    }

    .btn {
      background-color: var(--primary-color);
      color: white;
      border: none;
      padding: 12px 20px;
      border-radius: var(--border-radius);
      cursor: pointer;
      font-size: 1rem;
      font-weight: 500;
      transition: all 0.3s;
      display: inline-block;
      text-align: center;
    }

    .btn:hover {
      background-color: #3a5bd9;
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .btn-edit {
      background-color: var(--accent-color);
      padding: 8px 16px;
      font-size: 0.9rem;
    }

    .btn-edit:hover {
      background-color: #5649c0;
    }

    .system-controls {
      text-align: center;
      padding: 20px 0;
    }

    .info-note {
      background-color: #fff3cd;
      border-left: 4px solid #ffc107;
      padding: 10px 15px;
      margin: 20px 0;
      border-radius: 0 var(--border-radius) var(--border-radius) 0;
    }

    .loader {
      border: 8px solid #f3f3f3;
      border-top: 8px solid var(--primary-color);
      border-radius: 50%;
      width: 60px;
      height: 60px;
      animation: spin 1.5s linear infinite;
      margin: 20px auto;
    }

    .voice-badge {
      display: inline-block;
      background-color: #e9ecef;
      color: #495057;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.85rem;
      margin-left: 8px;
    }

    .settings-summary {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  background-color: var(--secondary-color);
  padding: 15px 20px;
  border-radius: var(--border-radius);
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  gap: 30px;
}

.settings-info-item {
  display: flex;
  align-items: center;
  margin-right: 30px;
  white-space: nowrap;
  font-size: 1rem;
}



    .settings-info-item {
      margin-bottom: 5px;
      display: flex;
      align-items: center;
    }
    .settings-info-item strong {
  margin-right: 6px;
  font-weight: 600;
  color: var(--primary-color);
}

    .settings-actions {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    .hidden {
      display: none;
    }

    .slide-in {
      animation: slideIn 0.3s forwards;
    }

    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .container {
        padding: 15px;
      }

      h1 {
        font-size: 2rem;
      }

      .btn {
        width: 100%;
        margin-bottom: 10px;
      }

      .settings-summary {
        flex-direction: column;
        text-align: center;
      }

      .settings-info {
        margin-bottom: 15px;
      }

      .settings-info-item {
        justify-content: center;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Cheeku Toy Manager</h1>

    <!-- Success/Error Messages -->
    <% if (typeof success !== 'undefined') { %>
      <div class="alert <%= success ? 'alert-success' : 'alert-error' %>" id="statusAlert">
        <%= message %>
      </div>
    <% } %>

    <!-- Active Settings Section -->
    <div class="card" id="active-settings-card">
      <h2>
        Active Settings
        <button id="edit-settings-btn" class="btn btn-edit">Edit Settings</button>
      </h2>

      <%
      let config = {
        name: 'Not set',
        role: 'Not configured',
        language: 'English',
        capabilities: 'Not specified',
        voice: 'Not set' // Default voice
      };

      // Map voice IDs to readable names
      const voiceNames = {
        'tapn1QwocNXk3viVSowa': 'Sparkles for Kids',
        '50YSQEDPA2vlOxhCseP4': 'Saanu - Soft and Calm',
        'zgqefOY5FPQ3bB7OZTVR': 'Niraj - Hindi Narrator',
        'CZdRaSQ51p0onta4eec8': 'Akshay - Indian Accent Narrator'
      };

      const currentConfig = inputs && inputs['1'];
      if (currentConfig) {
        // Parse configuration from stored data
        const nameMatch = currentConfig.start_text.match(/I['â€™]m\s+(.+?)[,.]/i);
        if (nameMatch) config.name = nameMatch[1] || 'Not set';

        // Determine role type
        if (currentConfig.start_text.includes('super-duper puzzle solver')) {
          config.role = 'Puzzle Solver';
        } else if (currentConfig.start_text.includes('amazing story teller')) {
          config.role = 'Story Teller';
        } else if (currentConfig.start_text.includes('hilarious joke teller')) {
          config.role = 'Joke Teller';
        } else {
          const customMatch = currentConfig.start_text.match(/the (.*?)! I love/);
          config.role = customMatch ? customMatch[1] : 'Custom Role';
        }

        // Parse language
        const langMatch = currentConfig.prompt.match(/ in (\w+)\./i);
        if (langMatch) {
          // Format language name properly
          const lang = langMatch[1].toLowerCase();
          config.language = lang.charAt(0).toUpperCase() + lang.slice(1);
        } else {
          config.language = 'English';
        }

        // Set voice - assuming you save voice ID in inputs
        config.voice = currentConfig.voice ? voiceNames[currentConfig.voice] || currentConfig.voice : 'Default';
      %>

      <div class="settings-summary">
        <div class="settings-info-item">
          <strong>Toy Name:</strong> <%= config.name || '' %>
        </div>
        <div class="settings-info-item">
          <strong>Role:</strong> <%= config.role %>
        </div>
        <div class="settings-info-item">
          <strong>Language:</strong> <%= config.language || 'English' %>
        </div>
        <!-- <div class="settings-info-item">
          <strong>Voice:</strong> <%= config.voice || 'Not set' %>
        </div> -->
      </div>
      

      <% } else { %>
        <div class="info-note">No configuration available yet. Please set up your toy using the form.</div>
        <script>
          // If no config exists, show the config form automatically
          document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('update-config-card').classList.remove('hidden');
            document.getElementById('edit-settings-btn').style.display = 'none';
          });
        </script>
      <% } %>
    </div>

    <!-- Update Configuration Form -->
    <div class="card hidden" id="update-config-card">
      <h2>Chnage Settings</h2>
      <form action="/submit" method="POST" id="config-form">
        <div class="form-group">
          <label for="name">Toy Name:</label>
          <input type="text" id="name" name="name" required
                placeholder="Enter toy name" value="<%= currentConfig ? config.name : '' %>">
        </div>

        <div class="form-group">
          <label for="prompt_selection">Select Role Type:</label>
          <select id="prompt_selection" name="prompt_selection" required>
            <option value="puzzle_solver" <%= currentConfig && config.role === 'Puzzle Solver' ? 'selected' : '' %>>Puzzle Solver</option>
            <option value="story_teller" <%= currentConfig && config.role === 'Story Teller' ? 'selected' : '' %>>Story Teller</option>
            <option value="joke_teller" <%= currentConfig && config.role === 'Joke Teller' ? 'selected' : '' %>>Joke Teller</option>
            <option value="custom" <%= currentConfig && !['Puzzle Solver', 'Story Teller', 'Joke Teller'].includes(config.role) ? 'selected' : '' %>>Custom Role</option>
          </select>
        </div>

        <div class="form-group" id="custom-prompt-group" style="<%= currentConfig && !['Puzzle Solver', 'Story Teller', 'Joke Teller'].includes(config.role) ? 'display: block;' : 'display: none;' %>">
          <label for="custom_prompt">Custom Role Title:</label>
          <input type="text" id="custom_prompt" name="custom_prompt"
                placeholder="Enter custom role (e.g., Magical Wizard)"
                value="<%= currentConfig && !['Puzzle Solver', 'Story Teller', 'Joke Teller'].includes(config.role) ? config.role : '' %>">

          <label for="custom_action">Role Capabilities:</label>
          <textarea id="custom_action" name="custom_action" rows="4"
                    placeholder="Describe what this role can do"></textarea>
        </div>

        <div class="form-group">
          <label for="language">Select Language:</label>
          <select id="language" name="language">
            <option value="English" <%= currentConfig && config.language === 'English' ? 'selected' : '' %>>English</option>
            <option value="hindi" <%= currentConfig && config.language === 'Hindi' ? 'selected' : '' %>>Hindi</option>
            <option value="kannada" <%= currentConfig && config.language === 'Kannada' ? 'selected' : '' %>>Kannada</option>
            <option value="tamil" <%= currentConfig && config.language === 'Tamil' ? 'selected' : '' %>>Tamil</option>
            <option value="malayalam" <%= currentConfig && config.language === 'Malayalam' ? 'selected' : '' %>>Malayalam</option>
            <option value="bhojpuri" <%= currentConfig && config.language === 'Bhojpuri' ? 'selected' : '' %>>Bhojpuri</option>
            <option value="punjabi" <%= currentConfig && config.language === 'Punjabi' ? 'selected' : '' %>>Punjabi</option>
          </select>
        </div>

        <% if (!currentConfig || !currentConfig.voice) { %>
        <div class="form-group">
          <label for="voice">Select Voice:</label>
          <select id="voice" name="voice" required>
            <option value="tapn1QwocNXk3viVSowa" <%= currentConfig && currentConfig.voice === 'tapn1QwocNXk3viVSowa' ? 'selected' : '' %>>Sparkles for Kids</option>
            <option value="50YSQEDPA2vlOxhCseP4" <%= currentConfig && currentConfig.voice === '50YSQEDPA2vlOxhCseP4' ? 'selected' : '' %>>Saanu - Soft and Calm</option>
            <option value="zgqefOY5FPQ3bB7OZTVR" <%= currentConfig && currentConfig.voice === 'zgqefOY5FPQ3bB7OZTVR' ? 'selected' : '' %>>Niraj - Hindi Narrator</option>
            <option value="CZdRaSQ51p0onta4eec8" <%= currentConfig && currentConfig.voice === 'CZdRaSQ51p0onta4eec8' ? 'selected' : '' %>>Akshay - Indian Accent Narrator</option>
          </select>
        </div>
        <% } %>

        <div style="display: flex; gap: 10px;">
          <button type="submit" class="btn">Save</button>
          <button type="button" id="cancel-edit-btn" class="btn" style="background-color: #6c757d;">Cancel</button>
        </div>
      </form>
    </div>
<!-- Loader -->
<div id="loader" class="loader" style="display: none;"></div>


  </div>

  <script>
    // Toggle custom role fields
    document.getElementById('prompt_selection').addEventListener('change', function () {
      const customGroup = document.getElementById('custom-prompt-group');
      customGroup.style.display = this.value === 'custom' ? 'block' : 'none';
    });
  
    // Edit settings button handler
    document.getElementById('edit-settings-btn').addEventListener('click', function () {
      const configCard = document.getElementById('update-config-card');
      configCard.classList.remove('hidden');
      configCard.classList.add('slide-in');
    });
  
    // Cancel edit button handler
    document.getElementById('cancel-edit-btn').addEventListener('click', function () {
      document.getElementById('update-config-card').classList.add('hidden');
    });
  
    // Form submission handler
    document.getElementById('config-form').addEventListener('submit', async function (event) {
      event.preventDefault(); // Prevent default form submission
  
      const loader = document.getElementById('loader');
  
      try {
        // Show loader only after Save button is clicked
        loader.style.display = 'block';
  
        // Submit form data
        const formData = new FormData(this);
        const response = await fetch('/submit', {
          method: 'POST',
          body: formData
        });
  
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
  
        const result = await response.json();
        if (result.success) {
          // Restart Docker after successful config update
          const restartResponse = await fetch('/restart-docker', { method: 'POST' });
          const restartResult = await restartResponse.json();
          alert(restartResult.message); // Show Docker restart message
        } else {
          alert(result.message); // Show config error message
        }
      } catch (error) {
        alert('Failed to update configuration or restart Docker: ' + error.message);
      } finally {
        loader.style.display = 'none';
        // Reload to reflect updated config
        window.location.reload();
      }
    });
  
    // Auto fade alert
    document.addEventListener('DOMContentLoaded', () => {
      const alertElement = document.getElementById('statusAlert');
      if (alertElement) {
        setTimeout(() => {
          alertElement.classList.add('fade-out');
          setTimeout(() => {
            alertElement.remove();
          }, 500); // match CSS transition duration
        }, 5000);
      }
    });
  </script>
  
</body>
</html>
